<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hframework.peacock.config.dao.CfgIndexHbaseMapper" >
  <resultMap id="BaseResultMap" type="com.hframework.peacock.config.domain.model.CfgIndexHbase" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="index_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="hbase_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="table" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="family" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="qualifier" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="rowkey_converter" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="ctime" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="mtime" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, index_id, hbase_id, `table`, family, qualifier, rowkey_converter, ctime, mtime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hframework.peacock.config.domain.model.CfgIndexHbase_Example" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `cfg_index_hbase`
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitEnd != null and limitEnd != 0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from `cfg_index_hbase`
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from `cfg_index_hbase`
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hframework.peacock.config.domain.model.CfgIndexHbase_Example" >
    delete from `cfg_index_hbase`
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hframework.peacock.config.domain.model.CfgIndexHbase" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `cfg_index_hbase` (index_id, hbase_id, `table`, 
      family, qualifier, rowkey_converter, 
      ctime, mtime)
    values (#{indexId,jdbcType=INTEGER}, #{hbaseId,jdbcType=INTEGER}, #{table,jdbcType=VARCHAR}, 
      #{family,jdbcType=VARCHAR}, #{qualifier,jdbcType=VARCHAR}, #{rowkeyConverter,jdbcType=TINYINT}, 
      #{ctime,jdbcType=INTEGER}, #{mtime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hframework.peacock.config.domain.model.CfgIndexHbase" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `cfg_index_hbase`
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="indexId != null" >
        index_id,
      </if>
      <if test="hbaseId != null" >
        hbase_id,
      </if>
      <if test="table != null" >
        `table`,
      </if>
      <if test="family != null" >
        family,
      </if>
      <if test="qualifier != null" >
        qualifier,
      </if>
      <if test="rowkeyConverter != null" >
        rowkey_converter,
      </if>
      <if test="ctime != null" >
        ctime,
      </if>
      <if test="mtime != null" >
        mtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="indexId != null" >
        #{indexId,jdbcType=INTEGER},
      </if>
      <if test="hbaseId != null" >
        #{hbaseId,jdbcType=INTEGER},
      </if>
      <if test="table != null" >
        #{table,jdbcType=VARCHAR},
      </if>
      <if test="family != null" >
        #{family,jdbcType=VARCHAR},
      </if>
      <if test="qualifier != null" >
        #{qualifier,jdbcType=VARCHAR},
      </if>
      <if test="rowkeyConverter != null" >
        #{rowkeyConverter,jdbcType=TINYINT},
      </if>
      <if test="ctime != null" >
        #{ctime,jdbcType=INTEGER},
      </if>
      <if test="mtime != null" >
        #{mtime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hframework.peacock.config.domain.model.CfgIndexHbase_Example" resultType="java.lang.Integer" >
    select count(*) from `cfg_index_hbase`
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update `cfg_index_hbase`
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.indexId != null" >
        index_id = #{record.indexId,jdbcType=INTEGER},
      </if>
      <if test="record.hbaseId != null" >
        hbase_id = #{record.hbaseId,jdbcType=INTEGER},
      </if>
      <if test="record.table != null" >
        `table` = #{record.table,jdbcType=VARCHAR},
      </if>
      <if test="record.family != null" >
        family = #{record.family,jdbcType=VARCHAR},
      </if>
      <if test="record.qualifier != null" >
        qualifier = #{record.qualifier,jdbcType=VARCHAR},
      </if>
      <if test="record.rowkeyConverter != null" >
        rowkey_converter = #{record.rowkeyConverter,jdbcType=TINYINT},
      </if>
      <if test="record.ctime != null" >
        ctime = #{record.ctime,jdbcType=INTEGER},
      </if>
      <if test="record.mtime != null" >
        mtime = #{record.mtime,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update `cfg_index_hbase`
    set id = #{record.id,jdbcType=INTEGER},
      index_id = #{record.indexId,jdbcType=INTEGER},
      hbase_id = #{record.hbaseId,jdbcType=INTEGER},
      `table` = #{record.table,jdbcType=VARCHAR},
      family = #{record.family,jdbcType=VARCHAR},
      qualifier = #{record.qualifier,jdbcType=VARCHAR},
      rowkey_converter = #{record.rowkeyConverter,jdbcType=TINYINT},
      ctime = #{record.ctime,jdbcType=INTEGER},
      mtime = #{record.mtime,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hframework.peacock.config.domain.model.CfgIndexHbase" >
    update `cfg_index_hbase`
    <set >
      <if test="indexId != null" >
        index_id = #{indexId,jdbcType=INTEGER},
      </if>
      <if test="hbaseId != null" >
        hbase_id = #{hbaseId,jdbcType=INTEGER},
      </if>
      <if test="table != null" >
        `table` = #{table,jdbcType=VARCHAR},
      </if>
      <if test="family != null" >
        family = #{family,jdbcType=VARCHAR},
      </if>
      <if test="qualifier != null" >
        qualifier = #{qualifier,jdbcType=VARCHAR},
      </if>
      <if test="rowkeyConverter != null" >
        rowkey_converter = #{rowkeyConverter,jdbcType=TINYINT},
      </if>
      <if test="ctime != null" >
        ctime = #{ctime,jdbcType=INTEGER},
      </if>
      <if test="mtime != null" >
        mtime = #{mtime,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hframework.peacock.config.domain.model.CfgIndexHbase" >
    update `cfg_index_hbase`
    set index_id = #{indexId,jdbcType=INTEGER},
      hbase_id = #{hbaseId,jdbcType=INTEGER},
      `table` = #{table,jdbcType=VARCHAR},
      family = #{family,jdbcType=VARCHAR},
      qualifier = #{qualifier,jdbcType=VARCHAR},
      rowkey_converter = #{rowkeyConverter,jdbcType=TINYINT},
      ctime = #{ctime,jdbcType=INTEGER},
      mtime = #{mtime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>